diff --git a/lib/r10k/forge/module_release.rb b/lib/r10k/forge/module_release.rb
index 321fa7f1..0d335261 100644
--- a/lib/r10k/forge/module_release.rb
+++ b/lib/r10k/forge/module_release.rb
@@ -13,6 +13,7 @@ class ModuleRelease
 
       def_setting_attr :proxy
       def_setting_attr :baseurl
+      def_setting_attr :cache_root, File.expand_path(ENV['HOME'] ? '~/.r10k/cache': '/root/.r10k/cache')
 
       include R10K::Logging
 
@@ -27,6 +28,18 @@ class ModuleRelease
       #   @return [Pathname] Where the module tarball will be downloaded to.
       attr_accessor :download_path
 
+      # @!attribute [rw] tarball_cache_path
+      #   @return [Pathname] Where the module tarball will be cached to.
+      attr_accessor :tarball_cache_path
+
+      # @!attribute [rw] tarball_cache_root
+      #   @return [Pathname] Directory where the module tarball will be cached to.
+      attr_accessor :tarball_cache_root
+
+      # @!attribute [rw] md5_file_path
+      #   @return [Pathname] Where the md5 of the cached tarball is stored.
+      attr_accessor :md5_file_path
+
       # @!attribute [rw] unpack_path
       #   @return [Pathname] Where the module will be unpacked to.
       attr_accessor :unpack_path
@@ -41,9 +54,17 @@ def initialize(full_name, version)
         # objects are created in the class instances and thus are not shared with
         # subclasses.
         PuppetForge::V3::Release.conn = PuppetForge::V3::Base.conn
+
         @forge_release = PuppetForge::V3::Release.new({ :name => @full_name, :version => @version, :slug => "#{@full_name}-#{@version}" })
 
-        @download_path = Pathname.new(Dir.mktmpdir) + (@forge_release.slug + '.tar.gz')
+        tarball_name = @forge_release.slug + '.tar.gz'
+        @download_path = Pathname.new(Dir.mktmpdir) + (tarball_name)
+        @tarball_cache_root = Pathname.new(settings[:cache_root]) + (@forge_release.slug + "/tarball/")
+        @tarball_cache_path = @tarball_cache_root + tarball_name
+
+        md5_filename = @forge_release.slug + '.md5'
+        @md5_file_path = @tarball_cache_root + md5_filename
+
         @unpack_path   = Pathname.new(Dir.mktmpdir) + @forge_release.slug
       end
 
@@ -65,34 +86,83 @@ def install(target_dir)
         cleanup
       end
 
-      # Download the module release to {#download_path}
+      # Download the module release to {#download_path} and cache to {#tarball_cache_path}
       #
       # @return [void]
       def download
-        logger.debug1 "Downloading #{@forge_release.slug} from #{PuppetForge::Release.conn.url_prefix} to #{@download_path}"
-        @forge_release.download(download_path)
+        if @tarball_cache_path.exist?
+          logger.debug1 "Using cached copy of #{@forge_release.slug} tarball"
+        else
+          logger.debug1 "Downloading #{@forge_release.slug} from #{PuppetForge::Release.conn.url_prefix} to #{@download_path}"
+          @forge_release.download(download_path)
+          FileUtils::mkdir_p(@tarball_cache_root)
+          FileUtils::mv(@download_path, @tarball_cache_path)
+        end
       end
 
-      # Verify the module release downloaded to {#download_path} against the
-      # module release checksum given by the Puppet Forge
+      # Verify the module release cached in {#tarball_cache_path} against the
+      # module release checksum given by the Puppet Forge. On mismatch, remove
+      # the cached copy.
       #
-      # @raise [PuppetForge::V3::Release::ChecksumMismatch] The
-      #   downloaded module release checksum doesn't match the expected Forge
-      #   module release checksum.
       # @return [void]
       def verify
-        logger.debug1 "Verifying that #{download_path} matches checksum #{@forge_release.file_md5}"
-        @forge_release.verify(download_path)
+        logger.debug1 "Verifying that #{@tarball_cache_path} matches checksum"
+
+        md5_of_tarball = Digest::MD5.hexdigest(File.read(@tarball_cache_path))
+
+        if @md5_file_path.exist?
+          verify_from_md5_file(md5_of_tarball)
+        else
+          verify_from_forge(md5_of_tarball)
+        end
       end
 
-      # Unpack the module release at {#download_path} into the given target_dir
+      # Verify the md5 of the cached tarball against the
+      # module release checksum stored in the cache as well.
+      # On mismatch, remove the cached copy of both files.
+      #
+      # @raise [PuppetForge::V3::Release::ChecksumMismatch] The
+      #   cached module release checksum doesn't match the cached checksum.
+      #
+      # @return [void]
+      def verify_from_md5_file(md5_of_tarball)
+        md5_from_file = File.read(@md5_file_path).strip
+        if md5_of_tarball != md5_from_file
+          logger.error "MD5 of #{@tarball_cache_path} (#{md5_of_tarball}) does not match checksum #{md5_from_file} in #{@md5_file_path}. Removing both files."
+          cleanup_cached_tarball_path
+          cleanup_md5_file_path
+          raise PuppetForge::V3::Release::ChecksumMismatch.new
+        end
+      end
+
+      # Verify the md5 of the cached tarball against the
+      # module release checksum from the forge.
+      # On mismatch, remove the cached copy of the tarball.
+      #
+      # @raise [PuppetForge::V3::Release::ChecksumMismatch] The
+      #   cached module release checksum doesn't match the forge checksum.
+      #
+      # @return [void]
+      def verify_from_forge(md5_of_tarball)
+        md5_from_forge = @forge_release.file_md5
+        #compare file_md5 to md5_of_tarball
+        if md5_of_tarball != md5_from_forge
+          logger.debug1 "MD5 of #{@tarball_cache_path} (#{md5_of_tarball}) does not match checksum #{md5_from_forge} found on the forge. Removing tarball."
+          cleanup_cached_tarball_path
+          raise PuppetForge::V3::Release::ChecksumMismatch.new
+        else
+          File.write(@md5_file_path, md5_from_forge)
+        end
+      end
+
+      # Unpack the module release at {#tarball_cache_path}  into the given target_dir
       #
       # @param target_dir [Pathname] The final path where the module release
       #   should be unpacked/installed into.
       # @return [void]
       def unpack(target_dir)
-        logger.debug1 _("Unpacking %{download_path} to %{target_dir} (with tmpdir %{tmp_path})") % {download_path: download_path, target_dir: target_dir, tmp_path: unpack_path}
-        file_lists = PuppetForge::Unpacker.unpack(download_path.to_s, target_dir.to_s, unpack_path.to_s)
+        logger.debug1 _("Unpacking %{tarball_cache_path} to %{target_dir} (with tmpdir %{tmp_path})") % {tarball_cache_path: tarball_cache_path, target_dir: target_dir, tmp_path: unpack_path}
+        file_lists = PuppetForge::Unpacker.unpack(tarball_cache_path.to_s, target_dir.to_s, unpack_path.to_s)
         logger.debug2 _("Valid files unpacked: %{valid_files}") % {valid_files: file_lists[:valid]}
         if !file_lists[:invalid].empty?
           logger.debug1 _("These files existed in the module's tar file, but are invalid filetypes and were not unpacked: %{invalid_files}") % {invalid_files: file_lists[:invalid]}
@@ -121,6 +191,20 @@ def cleanup_download_path
           download_path.delete
         end
       end
+
+      # Remove the cached module release.
+      def cleanup_cached_tarball_path
+        if tarball_cache_path.exist?
+          tarball_cache_path.delete
+        end
+      end
+
+      # Remove the module release md5.
+      def cleanup_md5_file_path
+        if md5_file_path.exist?
+          md5_file_path.delete
+        end
+      end
     end
   end
 end
diff --git a/lib/r10k/initializers.rb b/lib/r10k/initializers.rb
index 8cdd7784..162aa24d 100644
--- a/lib/r10k/initializers.rb
+++ b/lib/r10k/initializers.rb
@@ -31,6 +31,7 @@ def call
         end
 
         with_setting(:cachedir) { |value| R10K::Git::Cache.settings[:cache_root] = value }
+        with_setting(:cachedir) { |value| R10K::Forge::ModuleRelease.settings[:cache_root] = value }
 
         with_setting(:git) { |value| GitInitializer.new(value).call }
         with_setting(:forge) { |value| ForgeInitializer.new(value).call }
diff --git a/spec/unit/forge/module_release_spec.rb b/spec/unit/forge/module_release_spec.rb
index 29f9ffd7..424ff8ef 100644
--- a/spec/unit/forge/module_release_spec.rb
+++ b/spec/unit/forge/module_release_spec.rb
@@ -7,35 +7,105 @@
   subject { described_class.new('branan-eight_hundred', '8.0.0') }
 
   let(:forge_release_class) { PuppetForge::V3::Release }
+  let(:md5_digest_class) { Digest::MD5 }
 
   let(:download_path) { instance_double('Pathname') }
+  let(:tarball_cache_path) { instance_double('Pathname') }
+  let(:tarball_cache_root) { instance_double('Pathname') }
   let(:unpack_path) { instance_double('Pathname') }
   let(:target_dir) { instance_double('Pathname') }
+  let(:md5_file_path) { instance_double('Pathname') }
+
   let(:file_lists) { {:valid=>['valid_ex'], :invalid=>[], :symlinks=>['symlink_ex']} }
 
+  let(:file_contents) { "skeletor's closet" }
+  let(:md5_of_tarball) { "something_hexy" }
+  let(:good_md5) { md5_of_tarball }
+  let(:bad_md5) { "different_hexy_thing" }
+
   before do
     subject.download_path = download_path
+    subject.tarball_cache_path = tarball_cache_path
+    subject.tarball_cache_root = tarball_cache_root
     subject.unpack_path = unpack_path
+    subject.md5_file_path = md5_file_path
+  end
+
+  context "no cached tarball" do
+    describe '#download' do
+      it "downloads the module from the forge into `download_path`" do
+        expect(tarball_cache_path).to receive(:exist?).and_return(false)
+        expect(subject.forge_release).to receive(:download).with(download_path)
+        allow(FileUtils).to receive(:mkdir_p).with(tarball_cache_root)
+        expect(FileUtils).to receive(:mv).with(download_path, tarball_cache_path)
+        subject.download
+      end
+    end
   end
 
-  describe '#download' do
-    it "downloads the module from the forge into `download_path`" do
-      expect(subject.forge_release).to receive(:download).with(download_path)
-      subject.download
+  context "with cached tarball" do
+    describe '#download' do
+      it "does not download a new tarball" do
+        expect(tarball_cache_path).to receive(:exist?).and_return(true)
+        expect(subject.forge_release).not_to receive(:download).with(download_path)
+        subject.download
+      end
     end
   end
 
   describe '#verify' do
-    it "verifies the module checksum based on the Forge file checksum" do
-      allow(subject.forge_release).to receive(:file_md5).and_return('something')
-      expect(subject.forge_release).to receive(:verify).with(download_path)
+
+    it "verifies using the file md5, if that exists" do
+      allow(File).to receive(:read).and_return(file_contents)
+      allow(md5_digest_class).to receive(:hexdigest).and_return(md5_of_tarball)
+      allow(md5_file_path).to receive(:exist?).and_return(true)
+      expect(subject).to receive(:verify_from_md5_file).with(md5_of_tarball)
       subject.verify
     end
+
+    it "verifies using the forge file_md5, if no md5 file exists" do
+      allow(File).to receive(:read).and_return(file_contents)
+      allow(md5_digest_class).to receive(:hexdigest).and_return(md5_of_tarball)
+      allow(md5_file_path).to receive(:exist?).and_return(false)
+      expect(subject).to receive(:verify_from_forge).with(md5_of_tarball)
+      subject.verify
+    end
+  end
+
+  describe '#verify_from_md5_file' do
+
+    it "does nothing when the checksums match" do
+      expect(File).to receive(:read).with(md5_file_path).and_return(good_md5)
+      expect(subject).not_to receive(:cleanup_cached_tarball_path)
+      subject.verify_from_md5_file(md5_of_tarball)
+    end
+
+    it "raises an error and cleans up when the checksums do not match" do
+      expect(File).to receive(:read).with(md5_file_path).and_return(bad_md5)
+      expect(subject).to receive(:cleanup_cached_tarball_path)
+      expect(subject).to receive(:cleanup_md5_file_path)
+      expect { subject.verify_from_md5_file(md5_of_tarball) }.to raise_error(PuppetForge::V3::Release::ChecksumMismatch)
+    end
+  end
+
+  describe '#verify_from_forge' do
+    it "write the md5 to file when the checksums match" do
+      expect(subject.forge_release).to receive(:file_md5).and_return(good_md5)
+      expect(subject).not_to receive(:cleanup_cached_tarball_path)
+      expect(File).to receive(:write).with(md5_file_path, good_md5)
+      subject.verify_from_forge(md5_of_tarball)
+    end
+
+    it "raises an error and cleans up when the checksums do not match" do
+      expect(subject.forge_release).to receive(:file_md5).and_return(bad_md5)
+      expect(subject).to receive(:cleanup_cached_tarball_path)
+      expect { subject.verify_from_forge(md5_of_tarball) }.to raise_error(PuppetForge::V3::Release::ChecksumMismatch)
+    end
   end
 
   describe '#unpack' do
-    it "unpacks the module tarball in `download_path` into the provided target path" do
-      expect(PuppetForge::Unpacker).to receive(:unpack).with(download_path.to_s, target_dir.to_s, unpack_path.to_s).\
+    it "unpacks the module tarball in `tarball_cache_path` into the provided target path" do
+      expect(PuppetForge::Unpacker).to receive(:unpack).with(tarball_cache_path.to_s, target_dir.to_s, unpack_path.to_s).\
           and_return({:valid=>["extractedmodule/metadata.json"], :invalid=>[], :symlinks=>[]})
       subject.unpack(target_dir)
     end
@@ -52,7 +122,7 @@
   end
 
   describe "#cleanup" do
-    it "cleans up the download and unpack paths" do
+    it "cleans up the unpack paths" do
       expect(subject).to receive(:cleanup_unpack_path)
       expect(subject).to receive(:cleanup_download_path)
       subject.cleanup
